{"remainingRequest":"C:\\Users\\User\\Desktop\\DEMO(MESI)\\Vue-MESI(149)\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\User\\Desktop\\DEMO(MESI)\\Vue-MESI(149)\\frontend\\node_modules\\vue-image-compressor\\src\\js\\components\\vue-image-compressor.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\User\\Desktop\\DEMO(MESI)\\Vue-MESI(149)\\frontend\\node_modules\\vue-image-compressor\\src\\js\\components\\vue-image-compressor.vue","mtime":1482887947000},{"path":"C:\\Users\\User\\Desktop\\DEMO(MESI)\\Vue-MESI(149)\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\User\\Desktop\\DEMO(MESI)\\Vue-MESI(149)\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\DEMO(MESI)\\Vue-MESI(149)\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\n\n/*! Copyright (c) 2016 Naufal Rabbani (http://github.com/BosNaufal)\n* Licensed Under MIT (http://opensource.org/licenses/MIT)\n*\n* Vue Image Compressor @ Version 0.0.1\n*\n* refs:\n* https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL\n* https://davidwalsh.name/convert-canvas-image\n* https://beta.webcomponents.org/element/3mp3ri0r/cpol-image\n*\n*/\n\nimport base64toblob from 'base64toblob';\n\nexport default {\n\n  props: {\n    // Image Scale Percentage (1 - 100)\n    scale: {\n      type: Number,\n      default: 100\n    },\n\n    // Image Scale Percentage (1 - 100)\n    quality: {\n      type: Number,\n      default: 100\n    },\n\n    // Pass the files info when it's done\n    done: {\n      type: Function,\n      default: () => {}\n    }\n  },\n\n  data () {\n    return  {\n      file: {},\n      result: {},\n      reader: {},\n      imgSrc: \"\"\n    }\n  },\n\n  watch: {\n    // When Scale and Quality properties has changed, do Redraw\n    scale() { return this.redraw() },\n    quality() { return this.redraw() },\n  },\n\n  methods: {\n\n    /*\n      When Input File has changed\n    */\n    onChange(e){\n      // If There's no file choosen\n      let file = e.target.files[0]\n      if(!file) return false\n\n      // get the file\n      this.file = e.target.files[0];\n\n      // Validation\n      let type = this.file.type\n      let valid = type.indexOf(\"image\") !== -1\n\n      if(!valid) throw \"File Type Is Not Supported. Upload an image instead\"\n\n      // Make new FileReader\n      this.reader = new FileReader()\n\n      // Convert the file to base64 text\n      this.reader.readAsDataURL(this.file)\n\n      // on reader load somthing...\n      this.reader.onload = this.fileOnLoad\n\n    },\n\n\n    /*\n      Draw And Compress The Image\n      @params {String} imgUrl\n    */\n    drawImage(imgUrl) {\n      // Recreate Canvas Element\n      let canvas = document.createElement('canvas')\n      this.canvas = canvas\n\n      // Set Canvas Context\n      let ctx = this.canvas.getContext('2d')\n\n      // Create New Image\n      let img = new Image()\n      img.src = imgUrl\n\n      // Image Size After Scaling\n      let scale = this.scale / 100\n      let width = img.width * scale\n      let height = img.height * scale\n\n      // Set Canvas Height And Width According to Image Size And Scale\n      this.canvas.setAttribute('width', width)\n      this.canvas.setAttribute('height', height)\n\n      ctx.drawImage(img, 0, 0, width, height)\n\n      // Quality Of Image\n      let quality = this.quality ? (this.quality / 100) : 1\n\n      // If all files have been proceed\n      let base64 = this.canvas.toDataURL('image/jpeg', quality)\n      let fileName = this.result.file.name\n      let lastDot = fileName.lastIndexOf(\".\")\n      fileName = fileName.substr(0,lastDot) + '.jpeg'\n\n      let objToPass = {\n        canvas: this.canvas,\n        original: this.result,\n        compressed: {\n          blob: this.toBlob(base64),\n          base64: base64,\n          name: fileName,\n          file: this.buildFile(base64, fileName)\n        },\n      }\n\n      objToPass.compressed.size = Math.round(objToPass.compressed.file.size / 1000)+' kB'\n      objToPass.compressed.type = \"image/jpeg\"\n\n      this.done(objToPass)\n\n    },\n\n\n    /*\n      Redraw the canvas\n    */\n    redraw() {\n      if(this.result.base64) {\n        this.drawImage(this.result.base64)\n      }\n    },\n\n\n    /*\n      When The File in loaded\n    */\n    fileOnLoad() {\n      // The File\n      let { file } = this\n\n      // Make a fileInfo Object\n      let fileInfo = {\n        name: file.name,\n        type: file.type,\n        size: Math.round(file.size / 1000)+' kB',\n        base64: this.reader.result,\n        file: file\n      }\n\n      // Push it to the state\n      this.result = fileInfo\n\n      // DrawImage\n      this.drawImage(this.result.base64)\n    },\n\n    // Convert Base64 to Blob\n    toBlob (imgUrl) {\n      let blob = base64toblob(imgUrl.split(',')[1], \"image/jpeg\")\n      let url = window.URL.createObjectURL(blob)\n      return url\n    },\n\n    // Convert Blob To File\n    buildFile (blob, name) {\n      return new File([blob], name)\n    }\n\n  }\n};\n\n",{"version":3,"sources":["vue-image-compressor.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA","file":"vue-image-compressor.vue","sourceRoot":"node_modules/vue-image-compressor/src/js/components","sourcesContent":["\n<template>\n  <input type=\"file\" @change=\"onChange\" />\n</template>\n\n\n<script>\n\n  /*! Copyright (c) 2016 Naufal Rabbani (http://github.com/BosNaufal)\n  * Licensed Under MIT (http://opensource.org/licenses/MIT)\n  *\n  * Vue Image Compressor @ Version 0.0.1\n  *\n  * refs:\n  * https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL\n  * https://davidwalsh.name/convert-canvas-image\n  * https://beta.webcomponents.org/element/3mp3ri0r/cpol-image\n  *\n  */\n\n  import base64toblob from 'base64toblob';\n\n  export default {\n\n    props: {\n      // Image Scale Percentage (1 - 100)\n      scale: {\n        type: Number,\n        default: 100\n      },\n\n      // Image Scale Percentage (1 - 100)\n      quality: {\n        type: Number,\n        default: 100\n      },\n\n      // Pass the files info when it's done\n      done: {\n        type: Function,\n        default: () => {}\n      }\n    },\n\n    data () {\n      return  {\n        file: {},\n        result: {},\n        reader: {},\n        imgSrc: \"\"\n      }\n    },\n\n    watch: {\n      // When Scale and Quality properties has changed, do Redraw\n      scale() { return this.redraw() },\n      quality() { return this.redraw() },\n    },\n\n    methods: {\n\n      /*\n        When Input File has changed\n      */\n      onChange(e){\n        // If There's no file choosen\n        let file = e.target.files[0]\n        if(!file) return false\n\n        // get the file\n        this.file = e.target.files[0];\n\n        // Validation\n        let type = this.file.type\n        let valid = type.indexOf(\"image\") !== -1\n\n        if(!valid) throw \"File Type Is Not Supported. Upload an image instead\"\n\n        // Make new FileReader\n        this.reader = new FileReader()\n\n        // Convert the file to base64 text\n        this.reader.readAsDataURL(this.file)\n\n        // on reader load somthing...\n        this.reader.onload = this.fileOnLoad\n\n      },\n\n\n      /*\n        Draw And Compress The Image\n        @params {String} imgUrl\n      */\n      drawImage(imgUrl) {\n        // Recreate Canvas Element\n        let canvas = document.createElement('canvas')\n        this.canvas = canvas\n\n        // Set Canvas Context\n        let ctx = this.canvas.getContext('2d')\n\n        // Create New Image\n        let img = new Image()\n        img.src = imgUrl\n\n        // Image Size After Scaling\n        let scale = this.scale / 100\n        let width = img.width * scale\n        let height = img.height * scale\n\n        // Set Canvas Height And Width According to Image Size And Scale\n        this.canvas.setAttribute('width', width)\n        this.canvas.setAttribute('height', height)\n\n        ctx.drawImage(img, 0, 0, width, height)\n\n        // Quality Of Image\n        let quality = this.quality ? (this.quality / 100) : 1\n\n        // If all files have been proceed\n        let base64 = this.canvas.toDataURL('image/jpeg', quality)\n        let fileName = this.result.file.name\n        let lastDot = fileName.lastIndexOf(\".\")\n        fileName = fileName.substr(0,lastDot) + '.jpeg'\n\n        let objToPass = {\n          canvas: this.canvas,\n          original: this.result,\n          compressed: {\n            blob: this.toBlob(base64),\n            base64: base64,\n            name: fileName,\n            file: this.buildFile(base64, fileName)\n          },\n        }\n\n        objToPass.compressed.size = Math.round(objToPass.compressed.file.size / 1000)+' kB'\n        objToPass.compressed.type = \"image/jpeg\"\n\n        this.done(objToPass)\n\n      },\n\n\n      /*\n        Redraw the canvas\n      */\n      redraw() {\n        if(this.result.base64) {\n          this.drawImage(this.result.base64)\n        }\n      },\n\n\n      /*\n        When The File in loaded\n      */\n      fileOnLoad() {\n        // The File\n        let { file } = this\n\n        // Make a fileInfo Object\n        let fileInfo = {\n          name: file.name,\n          type: file.type,\n          size: Math.round(file.size / 1000)+' kB',\n          base64: this.reader.result,\n          file: file\n        }\n\n        // Push it to the state\n        this.result = fileInfo\n\n        // DrawImage\n        this.drawImage(this.result.base64)\n      },\n\n      // Convert Base64 to Blob\n      toBlob (imgUrl) {\n        let blob = base64toblob(imgUrl.split(',')[1], \"image/jpeg\")\n        let url = window.URL.createObjectURL(blob)\n        return url\n      },\n\n      // Convert Blob To File\n      buildFile (blob, name) {\n        return new File([blob], name)\n      }\n\n    }\n  };\n\n</script>\n"]}]}