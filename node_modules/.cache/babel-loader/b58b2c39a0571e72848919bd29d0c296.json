{"remainingRequest":"C:\\Users\\User\\Desktop\\Vue-MESI\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\User\\Desktop\\Vue-MESI\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\User\\Desktop\\Vue-MESI\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\User\\Desktop\\Vue-MESI\\frontend\\node_modules\\vue-image-compressor\\src\\js\\components\\vue-image-compressor.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\User\\Desktop\\Vue-MESI\\frontend\\node_modules\\vue-image-compressor\\src\\js\\components\\vue-image-compressor.vue","mtime":1482887947000},{"path":"C:\\Users\\User\\Desktop\\Vue-MESI\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\Vue-MESI\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\User\\Desktop\\Vue-MESI\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\Vue-MESI\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\n/*! Copyright (c) 2016 Naufal Rabbani (http://github.com/BosNaufal)\n* Licensed Under MIT (http://opensource.org/licenses/MIT)\n*\n* Vue Image Compressor @ Version 0.0.1\n*\n* refs:\n* https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL\n* https://davidwalsh.name/convert-canvas-image\n* https://beta.webcomponents.org/element/3mp3ri0r/cpol-image\n*\n*/\nimport base64toblob from 'base64toblob';\nexport default {\n  props: {\n    // Image Scale Percentage (1 - 100)\n    scale: {\n      type: Number,\n      default: 100\n    },\n    // Image Scale Percentage (1 - 100)\n    quality: {\n      type: Number,\n      default: 100\n    },\n    // Pass the files info when it's done\n    done: {\n      type: Function,\n      default: function _default() {}\n    }\n  },\n  data: function data() {\n    return {\n      file: {},\n      result: {},\n      reader: {},\n      imgSrc: \"\"\n    };\n  },\n  watch: {\n    // When Scale and Quality properties has changed, do Redraw\n    scale: function scale() {\n      return this.redraw();\n    },\n    quality: function quality() {\n      return this.redraw();\n    }\n  },\n  methods: {\n    /*\n      When Input File has changed\n    */\n    onChange: function onChange(e) {\n      // If There's no file choosen\n      var file = e.target.files[0];\n      if (!file) return false; // get the file\n\n      this.file = e.target.files[0]; // Validation\n\n      var type = this.file.type;\n      var valid = type.indexOf(\"image\") !== -1;\n      if (!valid) throw \"File Type Is Not Supported. Upload an image instead\"; // Make new FileReader\n\n      this.reader = new FileReader(); // Convert the file to base64 text\n\n      this.reader.readAsDataURL(this.file); // on reader load somthing...\n\n      this.reader.onload = this.fileOnLoad;\n    },\n\n    /*\n      Draw And Compress The Image\n      @params {String} imgUrl\n    */\n    drawImage: function drawImage(imgUrl) {\n      // Recreate Canvas Element\n      var canvas = document.createElement('canvas');\n      this.canvas = canvas; // Set Canvas Context\n\n      var ctx = this.canvas.getContext('2d'); // Create New Image\n\n      var img = new Image();\n      img.src = imgUrl; // Image Size After Scaling\n\n      var scale = this.scale / 100;\n      var width = img.width * scale;\n      var height = img.height * scale; // Set Canvas Height And Width According to Image Size And Scale\n\n      this.canvas.setAttribute('width', width);\n      this.canvas.setAttribute('height', height);\n      ctx.drawImage(img, 0, 0, width, height); // Quality Of Image\n\n      var quality = this.quality ? this.quality / 100 : 1; // If all files have been proceed\n\n      var base64 = this.canvas.toDataURL('image/jpeg', quality);\n      var fileName = this.result.file.name;\n      var lastDot = fileName.lastIndexOf(\".\");\n      fileName = fileName.substr(0, lastDot) + '.jpeg';\n      var objToPass = {\n        canvas: this.canvas,\n        original: this.result,\n        compressed: {\n          blob: this.toBlob(base64),\n          base64: base64,\n          name: fileName,\n          file: this.buildFile(base64, fileName)\n        }\n      };\n      objToPass.compressed.size = Math.round(objToPass.compressed.file.size / 1000) + ' kB';\n      objToPass.compressed.type = \"image/jpeg\";\n      this.done(objToPass);\n    },\n\n    /*\n      Redraw the canvas\n    */\n    redraw: function redraw() {\n      if (this.result.base64) {\n        this.drawImage(this.result.base64);\n      }\n    },\n\n    /*\n      When The File in loaded\n    */\n    fileOnLoad: function fileOnLoad() {\n      // The File\n      var file = this.file; // Make a fileInfo Object\n\n      var fileInfo = {\n        name: file.name,\n        type: file.type,\n        size: Math.round(file.size / 1000) + ' kB',\n        base64: this.reader.result,\n        file: file\n      }; // Push it to the state\n\n      this.result = fileInfo; // DrawImage\n\n      this.drawImage(this.result.base64);\n    },\n    // Convert Base64 to Blob\n    toBlob: function toBlob(imgUrl) {\n      var blob = base64toblob(imgUrl.split(',')[1], \"image/jpeg\");\n      var url = window.URL.createObjectURL(blob);\n      return url;\n    },\n    // Convert Blob To File\n    buildFile: function buildFile(blob, name) {\n      return new File([blob], name);\n    }\n  }\n};",{"version":3,"sources":["vue-image-compressor.vue"],"names":[],"mappings":"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","sourcesContent":["\n<template>\n  <input type=\"file\" @change=\"onChange\" />\n</template>\n\n\n<script>\n\n  /*! Copyright (c) 2016 Naufal Rabbani (http://github.com/BosNaufal)\n  * Licensed Under MIT (http://opensource.org/licenses/MIT)\n  *\n  * Vue Image Compressor @ Version 0.0.1\n  *\n  * refs:\n  * https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL\n  * https://davidwalsh.name/convert-canvas-image\n  * https://beta.webcomponents.org/element/3mp3ri0r/cpol-image\n  *\n  */\n\n  import base64toblob from 'base64toblob';\n\n  export default {\n\n    props: {\n      // Image Scale Percentage (1 - 100)\n      scale: {\n        type: Number,\n        default: 100\n      },\n\n      // Image Scale Percentage (1 - 100)\n      quality: {\n        type: Number,\n        default: 100\n      },\n\n      // Pass the files info when it's done\n      done: {\n        type: Function,\n        default: () => {}\n      }\n    },\n\n    data () {\n      return  {\n        file: {},\n        result: {},\n        reader: {},\n        imgSrc: \"\"\n      }\n    },\n\n    watch: {\n      // When Scale and Quality properties has changed, do Redraw\n      scale() { return this.redraw() },\n      quality() { return this.redraw() },\n    },\n\n    methods: {\n\n      /*\n        When Input File has changed\n      */\n      onChange(e){\n        // If There's no file choosen\n        let file = e.target.files[0]\n        if(!file) return false\n\n        // get the file\n        this.file = e.target.files[0];\n\n        // Validation\n        let type = this.file.type\n        let valid = type.indexOf(\"image\") !== -1\n\n        if(!valid) throw \"File Type Is Not Supported. Upload an image instead\"\n\n        // Make new FileReader\n        this.reader = new FileReader()\n\n        // Convert the file to base64 text\n        this.reader.readAsDataURL(this.file)\n\n        // on reader load somthing...\n        this.reader.onload = this.fileOnLoad\n\n      },\n\n\n      /*\n        Draw And Compress The Image\n        @params {String} imgUrl\n      */\n      drawImage(imgUrl) {\n        // Recreate Canvas Element\n        let canvas = document.createElement('canvas')\n        this.canvas = canvas\n\n        // Set Canvas Context\n        let ctx = this.canvas.getContext('2d')\n\n        // Create New Image\n        let img = new Image()\n        img.src = imgUrl\n\n        // Image Size After Scaling\n        let scale = this.scale / 100\n        let width = img.width * scale\n        let height = img.height * scale\n\n        // Set Canvas Height And Width According to Image Size And Scale\n        this.canvas.setAttribute('width', width)\n        this.canvas.setAttribute('height', height)\n\n        ctx.drawImage(img, 0, 0, width, height)\n\n        // Quality Of Image\n        let quality = this.quality ? (this.quality / 100) : 1\n\n        // If all files have been proceed\n        let base64 = this.canvas.toDataURL('image/jpeg', quality)\n        let fileName = this.result.file.name\n        let lastDot = fileName.lastIndexOf(\".\")\n        fileName = fileName.substr(0,lastDot) + '.jpeg'\n\n        let objToPass = {\n          canvas: this.canvas,\n          original: this.result,\n          compressed: {\n            blob: this.toBlob(base64),\n            base64: base64,\n            name: fileName,\n            file: this.buildFile(base64, fileName)\n          },\n        }\n\n        objToPass.compressed.size = Math.round(objToPass.compressed.file.size / 1000)+' kB'\n        objToPass.compressed.type = \"image/jpeg\"\n\n        this.done(objToPass)\n\n      },\n\n\n      /*\n        Redraw the canvas\n      */\n      redraw() {\n        if(this.result.base64) {\n          this.drawImage(this.result.base64)\n        }\n      },\n\n\n      /*\n        When The File in loaded\n      */\n      fileOnLoad() {\n        // The File\n        let { file } = this\n\n        // Make a fileInfo Object\n        let fileInfo = {\n          name: file.name,\n          type: file.type,\n          size: Math.round(file.size / 1000)+' kB',\n          base64: this.reader.result,\n          file: file\n        }\n\n        // Push it to the state\n        this.result = fileInfo\n\n        // DrawImage\n        this.drawImage(this.result.base64)\n      },\n\n      // Convert Base64 to Blob\n      toBlob (imgUrl) {\n        let blob = base64toblob(imgUrl.split(',')[1], \"image/jpeg\")\n        let url = window.URL.createObjectURL(blob)\n        return url\n      },\n\n      // Convert Blob To File\n      buildFile (blob, name) {\n        return new File([blob], name)\n      }\n\n    }\n  };\n\n</script>\n"],"sourceRoot":"node_modules/vue-image-compressor/src/js/components"}]}