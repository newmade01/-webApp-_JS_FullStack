{"remainingRequest":"C:\\Users\\User\\Desktop\\Vue-MESI(149)\\frontend\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\User\\Desktop\\Vue-MESI(149)\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\User\\Desktop\\Vue-MESI(149)\\frontend\\src\\store.js","dependencies":[{"path":"C:\\Users\\User\\Desktop\\Vue-MESI(149)\\frontend\\src\\store.js","mtime":1614324474009},{"path":"C:\\Users\\User\\Desktop\\Vue-MESI(149)\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\Vue-MESI(149)\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\Vue-MESI(149)\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n//store연결\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport router from './router';\nimport axios from 'axios';\nimport VueQrcodeReader from \"vue-qrcode-reader\";\nimport * as authApi from '@/api/auth';\nimport 'url-search-params-polyfill';\nimport * as index from '@/api/index';\nVue.use(Vuex);\nVue.use(VueQrcodeReader);\nexport default new Vuex.Store({\n  state: {\n    userInfo: null,\n    //로그인된 정보는 info에 저장해준다.\n    allUsers: [],\n    //DB조회 부분 임시 중앙 DB역할\n    isLogin: false,\n    //로그인 성공\n    isLoginError: false,\n    //로그인 에러\n    agencyName: null // 대리점 명으로 개인화\n\n  },\n  mutations: {\n    //실행을 하기위해 commit 명령어 사용\n    //로그인이 성공시,\n    loginSuccess: function loginSuccess(state, payload) {\n      state.isLogin = true; //로그인 성공\n\n      state.isLoginError = false; // 로그인 에러\n\n      state.userInfo = payload; //userInfo로 객체가 저장됨\n    },\n    //로그인이 실패시,\n    loginError: function loginError(state) {\n      state.isLogin = false;\n      state.isLoginError = true;\n    }\n  },\n  actions: {\n    login: function login(_ref, loginObj) {\n      var commit = _ref.commit;\n      //state부분에 DB역할을 하는 값이\n      console.log(loginObj); //입력값1\n\n      console.log(Object.values(loginObj)); //입력값2\n\n      var obj = Object.values(loginObj);\n      console.log(_typeof(obj[0])); //입력값3\n\n      var params = new URLSearchParams();\n      params.append('ENGINEER_ID', obj[0]); //agencyID로 저장\n\n      params.append('ENGINEER_PW', obj[1]);\n      console.log(loginObj.AGENCY_ID); //agencyID로 저장\n\n      axios.post('http://192.168.1.149:3002/ind/signin/post', params) //params(body)\n      .then(function (res) {\n        console.log(res);\n        console.log(\"프론트 post 성공\");\n\n        if (res.data.length === 0) {\n          //안에 데이터가 없으면 오류\n          commit('loginError');\n          alert('이메일과 비밀번호를 확인하세요');\n        } else {\n          commit('loginSuccess', obj[0]);\n          router.push({\n            name: \"home\"\n          }); //홈으로가기\n        }\n      }).catch(function (error) {\n        commit('loginError');\n        alert('에러 이메일과 비밀번호를 확인하세요');\n      });\n    },\n    logout: function logout(_ref2) {\n      var commit = _ref2.commit;\n      commit('logout');\n      router.push({\n        name: \"signin\"\n      });\n    }\n  }\n});",{"version":3,"sources":["C:/Users/User/Desktop/Vue-MESI(149)/frontend/src/store.js"],"names":["Vue","Vuex","router","axios","VueQrcodeReader","authApi","index","use","Store","state","userInfo","allUsers","isLogin","isLoginError","agencyName","mutations","loginSuccess","payload","loginError","actions","login","loginObj","commit","console","log","Object","values","obj","params","URLSearchParams","append","AGENCY_ID","post","then","res","data","length","alert","push","name","catch","error","logout"],"mappings":"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","sourcesContent":["//store연결\n\nimport Vue from 'vue'\nimport Vuex from 'vuex'\nimport router from './router'\nimport axios from 'axios'\nimport VueQrcodeReader from \"vue-qrcode-reader\";\nimport * as authApi from '@/api/auth'\nimport 'url-search-params-polyfill';\nimport * as index from '@/api/index'\n\nVue.use(Vuex);\nVue.use(VueQrcodeReader);\n\n\n\n\n\nexport default new Vuex.Store({\n    state: {\n        userInfo: null, //로그인된 정보는 info에 저장해준다.\n        allUsers: [], //DB조회 부분 임시 중앙 DB역할\n        isLogin: false, //로그인 성공\n        isLoginError: false, //로그인 에러\n        agencyName: null, // 대리점 명으로 개인화\n\n    },\n    mutations: { //실행을 하기위해 commit 명령어 사용\n\n        //로그인이 성공시,\n        loginSuccess(state, payload) {\n            state.isLogin = true //로그인 성공\n            state.isLoginError = false // 로그인 에러\n            state.userInfo = payload //userInfo로 객체가 저장됨\n        },\n\n        //로그인이 실패시,\n        loginError(state) {\n            state.isLogin = false\n            state.isLoginError = true\n        },\n    },\n    actions: {\n\n        login({ commit }, loginObj) { //state부분에 DB역할을 하는 값이\n            console.log(loginObj) //입력값1\n            console.log(Object.values(loginObj)) //입력값2\n\n            var obj = Object.values(loginObj)\n            console.log(typeof(obj[0])); //입력값3\n\n            var params = new URLSearchParams();\n            params.append('ENGINEER_ID', obj[0]); //agencyID로 저장\n            params.append('ENGINEER_PW', obj[1]);\n\n            console.log(loginObj.AGENCY_ID) //agencyID로 저장\n\n            axios\n                .post('http://192.168.1.149:3002/ind/signin/post', params) //params(body)\n                .then(res => {\n                    console.log(res);\n                    console.log(\"프론트 post 성공\")\n\n\n\n                    if (res.data.length === 0) { //안에 데이터가 없으면 오류\n                        commit('loginError')\n                        alert('이메일과 비밀번호를 확인하세요')\n\n                    } else {\n                        commit('loginSuccess', obj[0])\n                        router.push({ name: \"home\" }) //홈으로가기\n                    }\n\n\n                })\n                .catch((error) => {\n                    commit('loginError')\n                    alert('에러 이메일과 비밀번호를 확인하세요')\n\n                })\n\n        },\n        logout({ commit }) {\n            commit('logout')\n            router.push({ name: \"signin\" })\n        }\n    }\n})"]}]}